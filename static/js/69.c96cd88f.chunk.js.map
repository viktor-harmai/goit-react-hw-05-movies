{"version":3,"file":"static/js/69.c96cd88f.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/MovieGallery/MovieItem/MovieItem.styled.js","components/MovieGallery/MovieItem/MovieItem.js","components/MovieGallery/MovieGallery.styled.js","components/MovieGallery/MovieGallery.js","components/Notification/Notification.styled.js","components/Notification/Notification.js","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { Oval } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <Oval\n        height={80}\n        width={80}\n        color=\"blue\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"white\"\n        strokeWidth={2}\n        strokeWidthSecondary={2}\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  outline: none;\n  text-decoration: none;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc ((100% - 4 * 30px) / 4);\n  margin-left: 30px;\n  margin-bottom: 30px;\n  border-radius: 10px;\n  overflow: hidden;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n    box-shadow: 10px 11px 10px -4px rgba(0, 0, 0, 0.48);\n    -webkit-box-shadow: 10px 11px 10px -4px rgba(0, 0, 0, 0.48);\n    -moz-box-shadow: 10px 11px 10px -4px rgba(0, 0, 0, 0.48);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 360px;\n  height: 450px;\n  object-fit: cover;\n  transition: all 600ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 4px;\n  &:hover {\n    transform: scale(1.02);\n    cursor: pointer;\n  }\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  padding: 8px;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const Title = styled.p`\n  color: black;\n  font-size: 12px;\n  font-weight: 700;\n`;\n\nexport const Vote = styled.p`\n  color: black;\n  font-size: 15px;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nimport { StyledLink, Item, Image, Info, Title, Vote } from './MovieItem.styled';\n\nconst MovieItem = ({ id, title, src, vote }) => {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <div>\n        <StyledLink\n          to={`/movies/${id}`}\n          state={{\n            from: location.pathname + location.search,\n          }}\n        >\n          <Image src={src} alt={title} />\n          <Info>\n            <Title>{title.toUpperCase()}</Title>\n            <Vote>{vote}</Vote>\n          </Info>\n        </StyledLink>\n      </div>\n    </Item>\n  );\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  src: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  vote: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\n// export const MovieList = styled.ul`\n//   list-style: none;\n//   display: flex;\n//   flex-wrap: wrap;\n//   align-items: center;\n//   justify-content: center;\n//   padding-right: 100px;\n//   padding-left: 100px;\n//   margin-left: -30px;\n// `;\n\nexport const MovieList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 16px;\n  margin: 0px auto;\n  padding: 0px;\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\nimport MovieItem from './MovieItem';\nimport { MovieList } from './MovieGallery.styled';\n\nconst MovieGallery = ({ movies }) => {\n  return (\n    <MovieList>\n      {movies.map(({ id, title, poster_path, vote_average }) => {\n        const base_url = 'https://image.tmdb.org/t/p/w500';\n        return (\n          <MovieItem\n            key={id}\n            id={id}\n            src={base_url + poster_path}\n            title={title}\n            vote={vote_average}\n          >\n            {title}\n          </MovieItem>\n        );\n      })}\n    </MovieList>\n  );\n};\n\nexport default MovieGallery;\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number,\n    }).isRequired\n  ),\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.p`\n  padding-top: 50px;\n\n  text-align: center;\n  font-size: 30px;\n\n  color: red;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Message } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Searchbox = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  /* box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); */\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormBtn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormBtnLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { FcSearch } from 'react-icons/fc';\nimport PropTypes from 'prop-types';\n\nimport {\n  Searchbox,\n  SearchForm,\n  SearchFormBtn,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n  };\n\n  const handlSearchChange = e => {\n    const { value } = e.target;\n    setQuery(value.trim());\n  };\n  return (\n    <Searchbox>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormBtn type=\"submit\">\n          <FcSearch size={20} />\n        </SearchFormBtn>\n\n        <SearchFormInput\n          value={query}\n          onChange={handlSearchChange}\n          type=\"text\"\n          name=\"query\"\n          autocomplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </SearchForm>\n    </Searchbox>\n  );\n};\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 1200px;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin: 0 auto;\n\n  /* outline: 1px solid tomato; */\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as API from 'services/api';\n\nimport Searchbar from 'components/Searchbar';\nimport MovieGallery from 'components/MovieGallery';\nimport Loader from 'components/Loader';\nimport Notification from 'components/Notification';\n\nimport { Container } from './Movies.styled';\n\nexport const Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const userQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (userQuery) {\n      fetchData(userQuery);\n    }\n  }, [userQuery]);\n\n  const fetchData = async query => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await API.getMoviesQuery(query.toLowerCase());\n\n      if (response.length === 0) {\n        const message =\n          'Search Failure. There is no images for your query. Please enter other query.';\n        setError(message);\n      }\n\n      setMovies(response);\n    } catch {\n      const message = 'Oops, something went wrong ...';\n      setError(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSearchbarSubmit = newQuery => {\n    if (query.toLowerCase() !== newQuery.toLowerCase()) {\n      setSearchParams({ query: newQuery });\n      setQuery(newQuery);\n    }\n    if (query.trim() === '') {\n      const message = 'Field cannot be empty!';\n      setError(message);\n    }\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleSearchbarSubmit} />\n\n      {error ? (\n        <Notification message={error} />\n      ) : (\n        <Container>\n          {isLoading && <Loader />}\n\n          {movies.length > 0 && (\n            <>\n              <MovieGallery movies={movies} />\n            </>\n          )}\n        </Container>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'bcf36fb2338735ea4909e57693c71e92';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const baseUrl = 'https://image.tmdb.org/t/p/w500';\nexport const defaultUrl =\n  'https://upload.wikimedia.org/wikipedia/commons/6/6c/No_image_3x4.svg';\n\n// запрас на список самых популярных фильмов на сегодня для создания коллекции\n// на главной странице.\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  const { results } = data;\n  // console.log(results);\n  return results;\n};\n\n//запрос о полной информации о фильме для страницы кинофильма\nexport async function getDetails(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log(data);\n  return data;\n}\n\n// запрос информации о актёрском составе для страницы кинофильма\n\nexport async function getMovieCast(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const { cast } = data;\n  // console.log(cast);\n  return cast;\n}\n\n//запрос обзоров для страницы кинофильма\n\nexport async function getReview(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  const { results } = data;\n  // console.log(results);\n  return results;\n}\n\n// запрос на поиск кинофильма по ключевому слову на странице фильмов\n//\nexport async function getMoviesQuery(query) {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  const { results } = data;\n  // console.log(results);\n  return results;\n}\n"],"names":["Container","styled","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","StyledLink","Link","Item","Image","Info","Title","Vote","id","title","src","vote","location","useLocation","to","state","from","pathname","search","alt","toUpperCase","MovieList","movies","map","poster_path","vote_average","Message","message","Searchbox","SearchForm","SearchFormBtn","SearchFormInput","onSubmit","useState","query","setQuery","e","preventDefault","type","size","value","onChange","target","trim","name","autocomplete","autoFocus","placeholder","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","userQuery","get","useEffect","fetchData","API","toLowerCase","response","length","newQuery","Notification","Loader","MovieGallery","API_KEY","BASE_URL","baseUrl","defaultUrl","getTrending","axios","data","results","getDetails","getMovieCast","cast","getReview","getMoviesQuery"],"sourceRoot":""}