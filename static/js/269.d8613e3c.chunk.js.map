{"version":3,"file":"static/js/269.d8613e3c.chunk.js","mappings":"qLAEaA,E,OAAUC,GAAAA,EAAH,4G,SCMpB,EAJqB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,SAACF,EAAD,UAAUE,GAClB,C,2OCJYC,EAAcF,EAAAA,GAAAA,GAAH,kIAQXG,EAAaH,EAAAA,GAAAA,GAAH,sBAEVI,EAAeJ,EAAAA,GAAAA,GAAH,gDAGZK,EAAgBL,EAAAA,GAAAA,EAAH,sB,SC6C1B,EA/CgB,WACd,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAAUH,EACX,GAAE,CAACA,IAEJ,IAAMG,EAAS,mCAAG,WAAMC,GAAN,gGAESC,EAAAA,GAAcD,GAFvB,OAERE,EAFQ,OAGdX,EAAWW,GACXT,GAAc,GAJA,gDAME,iCAChBE,EADgB,kCANF,yDAAH,sDAWf,GAAuB,IAAnBL,EAAQa,QAAgBX,EAAY,CAEtC,OAAO,SAACY,EAAA,EAAD,CAAcpB,QADL,0CAEjB,CAED,OACE,8BACGU,GACC,SAACU,EAAA,EAAD,CAAcpB,QAASU,KAEvB,SAACT,EAAD,UACGK,EAAQe,KAAI,YAA8B,IAA3BL,EAA0B,EAA1BA,GAAIM,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACrB,EAAD,YACE,UAACC,EAAD,sBAAuBmB,MACvB,SAAClB,EAAD,UAAgBmB,MAFDP,EAKpB,OAKV,C,8OCxDKQ,EAAU,mCACVC,EAAW,gCAEJC,EAAU,kCACVC,EACX,uEAKWC,EAAW,mCAAG,wGACFC,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,sCACoBD,EADpB,oBADE,uBACjBM,EADiB,EACjBA,KAGAC,EAAYD,EAAZC,QAJiB,kBAMlBA,GANkB,2CAAH,qDAUjB,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA0BhB,GAA1B,yFACkBa,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAT,EADA,oBACcQ,EADd,oBADlB,uBACGM,EADH,EACGA,KADH,kBAKEA,GALF,kEAUA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAA4BjB,GAA5B,2FACkBa,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAT,EADA,4BACsBQ,EADtB,oBADlB,uBACGM,EADH,EACGA,KAIAI,EAASJ,EAATI,KALH,kBAOEA,GAPF,kEAYA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAyBnB,GAAzB,2FACkBa,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAT,EADA,4BACsBQ,EADtB,2BADlB,uBACGM,EADH,EACGA,KAIAC,EAAYD,EAAZC,QALH,kBAOEA,GAPF,kEAYA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,2FACkBR,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,iCACeD,EADf,kBACgCa,EADhC,+CADlB,uBACGP,EADH,EACGA,KAGAC,EAAYD,EAAZC,QAJH,kBAMEA,GANF,kE","sources":["components/Notification/Notification.styled.js","components/Notification/Notification.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.p`\n  padding-top: 50px;\n\n  text-align: center;\n  font-size: 30px;\n\n  color: red;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Message } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n\nexport const ReviewItem = styled.li``;\n\nexport const ReviewAuthor = styled.h2`\n  margin-bottom: 10px;\n`;\nexport const ReviewContent = styled.p``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'services/api';\n\nimport Notification from 'components/Notification';\n\nimport {\n  ReviewsList,\n  ReviewItem,\n  ReviewAuthor,\n  ReviewContent,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [reviewLoad, setreviewLoad] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchData(movieId);\n  }, [movieId]);\n\n  const fetchData = async id => {\n    try {\n      const response = await API.getReview(id);\n      setReviews(response);\n      setreviewLoad(true);\n    } catch {\n      const message = 'Oops, something went wrong ...';\n      setError(message);\n    }\n  };\n\n  if (reviews.length === 0 && reviewLoad) {\n    const message = 'We dont have any review for this movie';\n    return <Notification message={message} />;\n  }\n\n  return (\n    <>\n      {error ? (\n        <Notification message={error} />\n      ) : (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <ReviewItem key={id}>\n                <ReviewAuthor>Author: {author}</ReviewAuthor>\n                <ReviewContent>{content}</ReviewContent>\n              </ReviewItem>\n            );\n          })}\n        </ReviewsList>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'bcf36fb2338735ea4909e57693c71e92';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const baseUrl = 'https://image.tmdb.org/t/p/w500';\nexport const defaultUrl =\n  'https://upload.wikimedia.org/wikipedia/commons/6/6c/No_image_3x4.svg';\n\n// запрас на список самых популярных фильмов на сегодня для создания коллекции\n// на главной странице.\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  const { results } = data;\n  // console.log(results);\n  return results;\n};\n\n//запрос о полной информации о фильме для страницы кинофильма\nexport async function getDetails(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log(data);\n  return data;\n}\n\n// запрос информации о актёрском составе для страницы кинофильма\n\nexport async function getMovieCast(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const { cast } = data;\n  // console.log(cast);\n  return cast;\n}\n\n//запрос обзоров для страницы кинофильма\n\nexport async function getReview(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  const { results } = data;\n  // console.log(results);\n  return results;\n}\n\n// запрос на поиск кинофильма по ключевому слову на странице фильмов\n//\nexport async function getMoviesQuery(query) {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false&language=en-US&page=1`\n  );\n  const { results } = data;\n  // console.log(results);\n  return results;\n}\n"],"names":["Message","styled","message","ReviewsList","ReviewItem","ReviewAuthor","ReviewContent","useState","reviews","setReviews","reviewLoad","setreviewLoad","error","setError","movieId","useParams","useEffect","fetchData","id","API","response","length","Notification","map","author","content","API_KEY","BASE_URL","baseUrl","defaultUrl","getTrending","axios","data","results","getDetails","getMovieCast","cast","getReview","getMoviesQuery","query"],"sourceRoot":""}